<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xixili</title>
  
  <subtitle>called</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xixili.online/"/>
  <updated>2019-07-01T06:49:31.156Z</updated>
  <id>http://xixili.online/</id>
  
  <author>
    <name>WHF</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo + github 搭建个人博客</title>
    <link href="http://xixili.online/2019/07/01/hexo-github/"/>
    <id>http://xixili.online/2019/07/01/hexo-github/</id>
    <published>2019-07-01T06:49:31.155Z</published>
    <updated>2019-07-01T06:49:31.156Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="github准备">  <a href="#github准备" class="headerlink" title="github准备"></a>  <strong>github准备</strong></h2><ul>  <li>注册github </li>  <li>创建github仓库 仓库名称为： Github昵称.github.io</li>  <li>添加秘钥</li></ul><h2 id="环境准备">  <a href="#环境准备" class="headerlink" title="环境准备"></a>  <strong>环境准备</strong></h2><p>安装git,以及node</p><ol>  <li>全局安装hexo: npm install -g hexo-cli    <br>    <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">hexo官网</a>  </li>  <li>    <p>初始化博客</p>    <ul>      <li>        <p>建立一个博客文件夹，并初始化博客，          <folder>为文件夹的名称</folder></p>        <figure class="highlight plain">          <table>            <tr>              <td class="gutter">                <pre><span class="line">1</span><br></pre>              </td>              <td class="code">                <pre><span class="line">$ hexo init &lt;folder&gt;</span><br></pre>              </td>            </tr>          </table>        </figure>      </li>      <li>        <p>进入博客文件夹，          <folder>为文件夹的名称</folder></p>        <figure class="highlight plain">          <table>            <tr>              <td class="gutter">                <pre><span class="line">1</span><br></pre>              </td>              <td class="code">                <pre><span class="line">cd &lt;folder&gt;</span><br></pre>              </td>            </tr>          </table>        </figure>      </li>      <li>        <p>根据博客既定的dependencies配置安装所有的依赖包</p>        <figure class="highlight plain">          <table>            <tr>              <td class="gutter">                <pre><span class="line">1</span><br></pre>              </td>              <td class="code">                <pre><span class="line">$ npm install</span><br></pre>              </td>            </tr>          </table>        </figure>      </li>    </ul>  </li></ol><h2 id="配置博客">  <a href="#配置博客" class="headerlink" title="配置博客"></a>  <strong>配置博客</strong></h2><p>修改_config.yml文件</p><ol>  <li>    <p>修改网站相关信息</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>          </td>          <td class="code">            <pre><span class="line">title: inerdstack</span><br><span class="line">subtitle: the stack of it nerds</span><br><span class="line">description: start from zero</span><br><span class="line">author: inerdstack</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre>          </td>        </tr>      </table>    </figure>    <blockquote>      <p>注意：每一项的填写，其:后面都要保留一个空格，下同。language和timezone都是有输入规范的，详细可参考语言规范和时区规范。</p>    </blockquote>  </li>  <li>    <p>配置统一资源定位符（个人域名）</p>    <p> url:      <a href="http://xixili.online">http://xixili.online</a> 对于root（根目录）、permalink（永久链接）、permalink_defaults（默认永久链接）等其他信息保持默认。</p>  </li>  <li>    <p>配置部署</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>          </td>          <td class="code">            <pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/iNerdStack/inerdstack.github.io.git</span><br><span class="line">  branch: master</span><br></pre>          </td>        </tr>      </table>    </figure>    <blockquote>      <p>此处的repo为github上的仓库地址，使用HTTPS时，需要每次更新都输入用户名以及密码，所以此处使用SSH的URL,        <br> 如图：        <img src="/2019/07/01/hexo-github/github_repo.png" alt="演示">      </p>    </blockquote>  </li></ol><h2 id="编写文章">  <a href="#编写文章" class="headerlink" title="编写文章"></a>编写文章</h2><ol>  <li>    <p>新建文章： hexo n “文章标题”      <br> 完整命令 hexo new</p>    <ul>      <li>本地博客文件夹source-&gt;_post文件夹下看到我们新建的markdown文件，就可以用md格式编写你的博客了 </li>      <li>同样也可以直接在source-&gt;_deploy文件夹下手动添加md文件</li>    </ul>  </li>  <li>    <p>本地发布： hexo s      <br> 完整命令 hexo server ,如图：      <img src="/2019/07/01/hexo-github/hexo_s.png" alt="演示">    </p>  </li>  <li>    <p>生成静态页面： hexo g      <br> 完整命令： hexo generate ,生成静态页面至public目录 </p>  </li>  <li>    <p>部署至github: hexo d      <br> 完整命令：hexo deploy ，即部署到_config.yml中配置的github.</p>    <blockquote>      <ol>        <li>部署之前应git init</li>        <li>在部署HEXO出现ERROR Deployer not found : .git时          <br>执行 npm install hexo-deployer-git –save 之后即可顺利部署</li>      </ol>    </blockquote>  </li></ol><hr><h2 id="绑定域名">  <a href="#绑定域名" class="headerlink" title="绑定域名"></a>  <strong>绑定域名</strong></h2><ol>  <li>购买域名，    <a href="https://www.aliyun.com" target="_blank" rel="noopener">阿里云</a>为例</li>  <li>域名解析，在    <a href="https://netcn.console.aliyun.com/core/domain/list" target="_blank" rel="noopener">阿里云控制台</a>的的域名列表中    <br>    <img src="/2019/07/01/hexo-github/aliyun_dns.png" alt="DNS解析">    <br> 点击添加解析按钮，如图一次输入：CNAME、@、Github博客域名。选择保存完成个人域名向个人博客的映射。    <br> 添加解析后，在浏览器输入我们新注册的域名：    <img src="/2019/07/01/hexo-github/github_404.png" alt="github404">    <br> 网站报出了404错误，这说明我们的域名已经成功映射到了Github网站</li>  <li>    <p>个人博客向个人域名的映射 </p>    <p> 在source目录下新建一个CNAME文件，文件内容为个人域名，例如我的为xixili.online(注意：没有http: //，没有 www)，      <br> 然后重新生成部署，在浏览器端重新输入我们的域名，就可以发现成功了</p>  </li></ol><h2 id="其他">  <a href="#其他" class="headerlink" title="其他"></a>  <strong>其他</strong></h2><p>界面添加图片</p><ol>  <li>把主页配置文件_config.yml 里的post_asset_folder 设置为true</li>  <li>hexo目录下执行: npm install hexo-asset-image –save    <br> 这是下载安装一个可以上传本地图片的插件，来自dalao：dalao的git</li>  <li>运行hexo n “文章标题”来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹, 用于存放图片</li>  <li>在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：    <br> !【你想输入的替代文字】(xxxx/图片名.jpg)</li>  <li>最后检查一下，hexo g生成页面后，进入public\2017\02\26\index.html文件中查看相关字段，可以发现，    <br> html标签内的语句是&lt; mg src=”2017/02/26/xxxx/图片名.jpg”&gt;，而不是&lt;img src=”xxxx/图片名.jpg&gt;。</li></ol><h2 id="通用的音乐视频插入方法">  <a href="#通用的音乐视频插入方法" class="headerlink" title="通用的音乐视频插入方法"></a>通用的音乐视频插入方法</h2><p>播放音乐的aplayer，安装命令</p><pre><code>npm install hexo-tag-aplayer</code></pre><ol>  <li>iframe 标签</li></ol><p>代码从网易云音乐获得</p><p>  <img src="/2019/07/01/hexo-github/QQ20190630-223250@2x.png" alt="163"></p><p>  <img src="/2019/07/01/hexo-github/QQ20190630-223343@2x.png" alt="1623">  <br>在需要添加音乐的地方加上：</p><p>网易云音乐</p><ol>  <li>dplayer</li></ol><ol>  <li>    <p>vedio </p>    <video width="480" height="320" controls>      <br>      <source src="视频或者音乐的直接链接">      <br>    </video>  </li>  <li>    <p>embed 标签(flash） 推荐</p>  </li></ol><p>网易云音乐举例 可以用</p><embed src="//music.163.com/style/swf/widget.swf?sid=30251317&type=2&auto=1&width=320&height=66" width="340" height="86" allownetworking="all"><p>虾米音乐举例 可以用</p><embed src="http://www.xiami.com/widget/292074908_1773801572/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"><p>爱奇艺举例 可以用</p><embed src="//player.video.iqiyi.com/69357ea5caa02e785650ee9f7ea37f3e/0/0/w_19rzll4019.swf-albumId=21134579009-tvId=21134579009-isPurchase=0-cnId=undefined" allowfullscreen="true" quality="high" width="480" height="350" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash"><ol>  <li>iframe</li></ol><p>爱奇艺 可以用</p><iframe src="http://open.iqiyi.com/developer/player_js/coopPlayerIndex.html?vid=69357ea5caa02e785650ee9f7ea37f3e&tvId=21134579009&accessToken=2.f22860a2479ad60d8da7697274de9346&appKey=3955c3425820435e86d0f4cdfe56f5e7&appId=1368&height=100%&width=100%" frameborder="0" allowfullscreen="false" width="100%" height="100%"></iframe><ol>  <li>插入 Bilibili HTML5 播放器 可以用</li></ol><iframe src="//player.bilibili.com/player.html?aid=18848883&cid=30740620&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="工具" scheme="http://xixili.online/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>HTTP基本原理</title>
    <link href="http://xixili.online/2019/06/30/HTTP%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
    <id>http://xixili.online/2019/06/30/HTTP基本原理/</id>
    <published>2019-06-30T14:02:29.000Z</published>
    <updated>2019-06-30T15:23:55.024Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>[toc]</p><h4 id="网络协议">  <a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h4><p>OSI是指Open System Interconnect，意为开放式系统互联。  <br>TCP/IP是指传输控制协议/网间协议，是目前世界上应用最广的协议。  <br>  <img src="/2019/06/30/HTTP基本原理/QQ20190630-220308@2x.png" alt="2262850b74a03a1690e5a172300296ff.png">  <br>  <img src="/2019/06/30/HTTP基本原理/QQ20190630-220532@2x.png" alt="56a77ae33e291afc6e161968012408bc.png">  <br>  <img src="/2019/06/30/HTTP基本原理/QQ20190630-220546@2x.png" alt="93c6d9aa6c98e6e1a6490f45faab0e13.png">  <br>  <img src="/2019/06/30/HTTP基本原理/QQ20190630-220611@2x.png" alt="59f2d62f0479cd0fb36a55ee7990ec28.png"></p><h4 id="HTTP和HTTPS">  <a href="#HTTP和HTTPS" class="headerlink" title="HTTP和HTTPS"></a>HTTP和HTTPS</h4><ul>  <li>HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</li>  <li>HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。    <h5 id="HTTP">      <a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h5>      <img src="/2019/06/30/HTTP基本原理/QQ20190630-220630@2x.png" alt="e3a228adeed7dcf89f404385cb7ec3ac.png">  </li></ul><h6 id="GET与POST方法区别">  <a href="#GET与POST方法区别" class="headerlink" title="GET与POST方法区别"></a>GET与POST方法区别</h6><ol>  <li>    <strong>可见性</strong>。在客户端，    <strong>Get方式在通过URL提交数据，数据在URL中可以看到</strong>；POST方式，数据放在HTTP包的body中。</li>  <li>    <strong>数据长度的限制</strong>，    <strong>GET方式提交的数据大小有限制（因为浏览器对URL的长度有限制,总2048个字符，所以参数最大1024字节</strong>），而POST则没有此限制。</li>  <li>    <strong>安全性</strong>。正如在（1）中提到，使用 Get 的时候，参数会显示在地址栏上，而 Post 不会。所以，如果这些数据是中文数据而且是非敏感数据，那么使用    get；如果用户输入的数据不是中文字符而且包含敏感数据，那么还是使用 post为好。</li>  <li>    <strong>书签</strong>。GET可作为书签</li>  <li>    <strong>缓存</strong>get是从服务器上获取数据，post是向服务器传送数据。所以    <strong>GET请求可以被缓存</strong>，而POST请求不会</li>  <li>    <strong>历史</strong>，GET请求可保留与浏览器历史数据中，而POST不能</li>  <li>    <strong>多次请求结果</strong>。 GET请求的数据是幂等的，而POST不是</li>  <li>    <strong>对数据类型的限制</strong>。GET只允许 ASCII 字符。而POST没有限制。也允许二进制数据。    <h6 id="HTTP请求">      <a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h6>    <img src="/2019/06/30/HTTP基本原理/QQ20190630-220645@2x.png" alt="e668bbcfa924504d57b6e6d3135302a5.png">    <br>或者    <br>    <img src="/2019/06/30/HTTP基本原理/QQ20190630-220658@2x.png" alt="0dd63e860be3818e6fff79d66fe9939e.png">  </li></ol><p>请求：</p><ul>  <li>请求行（Request Line）： 分为三个部分：请求方法、请求地址 和 协议及版本以CRLF(\r\n)结束。    <ul>      <li>请求方法：        <ul>          <li>GET、POST、PUT、DELETE、PATCH、HEAD、OPTIONS、TRACE。</li>          <li>最常的两种GET和POST，如果是RESTful接口的话一般会用到GET、POST、DELETE、PUT。</li>        </ul>      </li>      <li>请求地址：        <ul>          <li>URL:统一资源定位符，是一种自愿位置的抽象唯一识别方法。</li>          <li>组成：&lt;协议&gt;：//&lt;主机&gt;：&lt;端口&gt;/&lt;路径&gt; </li>          <li>端口和路径有时可以省略（HTTP默认端口号是80）</li>        </ul>      </li>      <li>协议版本        <ul>          <li>协议版本的格式为：HTTP/主版本号.次版本号，常用的有HTTP/1.0和HTTP/1.1</li>        </ul>      </li>    </ul>  </li>  <li>请求头（Request Header）    <ul>      <li>        <strong>请求头部为请求报文添加了一些附加信息</strong>，由“名/值”对组成，每行一对，名和值之间使用冒号分隔。</li>      <li>        <strong>请求头部的最后会有一个空行，表示请求头部结束</strong>，接下来为请求数据，这一行非常重要，必不可少。</li>    </ul>  </li>  <li>请求体（请求数据）    <ul>      <li>可选部分，比如GET请求就没有请求数据。</li>    </ul>  </li></ul><p>常见的请求头  <br>  <img src="/2019/06/30/HTTP基本原理/QQ20190630-220710@2x.png" alt="9f2cef8f2b4ba7d5784892f85df476d7.png">  <br>POST请求报文  <br>  <figure class="highlight plain">    <table>      <tr>        <td class="gutter">          <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>        </td>        <td class="code">          <pre><span class="line">POST 　/index.php　HTTP/1.1 　　 请求行</span><br><span class="line">Host: localhost</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 5.1; rv:10.0.2) Gecko/20100101 Firefox/10.0.2　　请求头</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8</span><br><span class="line">Accept-Language: zh-cn,zh;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Referer: http://localhost/</span><br><span class="line">Content-Length：25</span><br><span class="line">Content-Type：application/x-www-form-urlencoded</span><br><span class="line">　　空行</span><br><span class="line">username=aa&amp;password=1234　　请求数据</span><br></pre>        </td>      </tr>    </table>  </figure></p><h6 id="HTTP响应">  <a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h6><p>  <img src="/2019/06/30/HTTP基本原理/QQ20190630-220721@2x.png" alt="dab06addeb80c644075f94fc04ce5c22.png">  <br>或者  <br>  <img src="/2019/06/30/HTTP基本原理/QQ20190630-220730@2x.png" alt="658ee84de7af3fe255147c9062d6a258.png"></p><p>HTTP响应报文主要由状态行、响应头部、空行以及响应数据组成。</p><ul>  <li>状态行    <ul>      <li>协议版本        <ul>          <li>协议版本的格式为：HTTP/主版本号.次版本号，常用的有HTTP/1.0和HTTP/1.1</li>        </ul>      </li>      <li>状态码: 状态代码为3位数字        <ul>          <li>1xx：指示信息–表示请求已接收，继续处理。</li>          <li>2xx：成功–表示请求已被成功接收、理解、接受。</li>          <li>3xx：重定向–要完成请求必须进行更进一步的操作。</li>          <li>4xx：客户端错误–请求有语法错误或请求无法实现。</li>          <li>5xx：服务器端错误–服务器未能实现合法的请求。</li>        </ul>      </li>      <li>状态码描述: 状态码描述是对状态码的简单描述</li>    </ul>  </li>  <li>响应头部    <ul>      <li>与请求头部类似，为响应报文添加了一些附加信息</li>    </ul>  </li>  <li>响应体（响应数据）    <ul>      <li>用于存放需要返回给客户端的数据信息</li>    </ul>  </li></ul><p>常见响应头部如下  <br>  <img src="/2019/06/30/HTTP基本原理/QQ20190630-220741@2x.png" alt="3f631ab861df9acd5d63ad0165db85de.png"></p><p>面是一个响应报文的实例：  <br>  <figure class="highlight plain">    <table>      <tr>        <td class="gutter">          <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>        </td>        <td class="code">          <pre><span class="line">HTTP/1.1 200 OK              状态行     </span><br><span class="line">Server: nginx/1.6.3              响应头部开始</span><br><span class="line">Date: Mon, 15 Oct 2018 03:30:28 GMT </span><br><span class="line">Content-Type: application/json;charset=UTF-8      </span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Expires: Thu, 01 Jan 1970 00:00:00 GMT</span><br><span class="line">Content-Encoding: gzip      </span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Proxy-Connection: Keep-alive   响应头部开始       </span><br><span class="line">            空行</span><br><span class="line">&#123;&quot;errno&quot;:0,&quot;dialogInfo&quot;:null,&quot;body&quot;:&#123;&quot;list&quot;:[&#123;&quot;flag&quot;:2,&quot;group_id&quot;:1557,&quot;group_name&quot;:&quot;港股&quot;,&quot;count&quot;:1&#125;,&#123;&quot;flag&quot;:3,&quot;group_id&quot;:1558,&quot;group_name&quot;:&quot;美股&quot;,&quot;count&quot;:7&#125;,&#123;&quot;flag&quot;:1,&quot;group_id&quot;:1556,&quot;group_name&quot;:&quot;全部&quot;,&quot;count&quot;:8&#125;]&#125;,&quot;message&quot;:&quot;success&quot;&#125;  响应数据</span><br></pre>        </td>      </tr>    </table>  </figure></p><p>响应：</p><ol>  <li>响应状态码（Response Status Code）</li>  <li>响应头（Response Header）</li>  <li>响应体（Response Body）</li></ol><h6 id="TCP三次握手">  <a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h6><p>为什么要三次握手？  <br>为了防止已失效的连接请求报文段突然又传送到了服务端，避免server资源浪费  <br>  <img src="/2019/06/30/HTTP基本原理/QQ20190630-220806@2x.png" alt="e9b575acd89957e9329939f2ac8dba3e.png">  <br>  <img src="/2019/06/30/HTTP基本原理/QQ20190630-220842@2x.png" alt="e9b575acd89957e9329939f22ac8dba3e.png"></p><p>  <strong>ACK：响应标识，1表示响应，连接建立成功之后，所有报文段ACK的值都为1    <br>SYN：连接标识，1表示建立连接，连接请求和连接接受报文段SYN=1，其他情况都是0    <br>FIN：关闭连接标识，1标识关闭连接，关闭请求和关闭接受报文段FIN=1，其他情况都是0，跟SYN类似    <br>seq number：序号，一个随机数X，请求报文段中会有该字段，响应报文段没有    <br>ack number：应答号，值为请求seq+1，即X+1，除了连接请求和连接接受响应报文段没有该字段，其他的报文段都有该字段</strong></p><p>  <strong>第一次握手</strong>：建立连接请求。客户端发送连接请求报文段，将SYN置为1，seq为随机数x。然后，客户端进入SYN_SEND状态，等待服务器确认。  <br>  <strong>第二次握手</strong>：确认连接请求。服务器收到客户端的SYN报文段，需要对该请求进行确认，设置ack=x+1（即客户端seq+1）。同时自己也要发送SYN请求信息，即SYN置为1，seq=y。服务器将SYN和ACK信息放在一个报文段中，一并发送给客户端，服务器进入SYN_RECV状态。  <br>  <strong>第三次握手</strong>：客户端收到SYN+ACK报文段，将ack设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕，客户端和服务券进入ESTABLISHED状态，完成Tcp三次握手。  <br>  <img src="/2019/06/30/HTTP基本原理/QQ20190630-220854@2x.png" alt="31494cee420df794b7424c9edca70e47.png"></p><h6 id="HTTP流程">  <a href="#HTTP流程" class="headerlink" title="HTTP流程"></a>HTTP流程</h6><p>第一步：建立TCP/IP连接，客户端与服务器通过Socket三次握手进行连接  <br>第二步：客户端向服务端发起HTTP请求（例如：POST/login.html http/1.1）  <br>第三步：客户端发送请求头信息，请求内容，最后会发送一空白行，标示客户端请求完毕  <br>第四步：服务器做出应答，表示对于客户端请求的应答，例如：HTTP/1.1 200 OK  <br>第五步：服务器向客户端发送应答头信息  <br>第六步：服务器向客户端发送请求头信息后，也会发送一空白行，标示应答头信息发送完毕，接着就以Content-type要求的数据格式发送数据给客户端  <br>第七步：服务端关闭TCP连接，如果服务器或者客户端增Connection:keep-alive就表示客户端与服务器端继续保存连接，在下次请求时可以继续使用这次的连接</p><h5 id="HTTPS">  <a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h5><p>Https协议是以安全为目标的Http通道，简单来说就是Http的安全版。主要是在Http下加入SSL层（现在主流的是SLL/TLS），SSL是Https协议的安全基础。Https默认端口号为443。</p><p>CA证书，就是CA颁发的证书，可用于验证网站是否可信（针对HTTPS）、验证某文件是否可信（是否被篡改）等，也可以用一个证书来证明另一个证书是真实可信，最顶级的证书称为根证书。除了根证书（自己证明自己是可靠），其它证书都要依靠上一级的证书，来证明自己。</p><h6 id="HTTPS流程">  <a href="#HTTPS流程" class="headerlink" title="HTTPS流程"></a>HTTPS流程</h6><p>  <img src="/2019/06/30/HTTP基本原理/QQ20190630-220905@2x.png" alt="b4909f2b1b1e2c26436e97ebcf7cb47f.png"></p><ol>  <li>客户端发起HTTPS请求</li>  <li>服务端的配置    <br> 采用HTTPS协议的服务器必须要有一套数字证书，可以是自己制作或者CA证书。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用CA证书则不会弹出提示页面。这套证书其实就是一对公钥和私钥。公钥给别人加密使用，私钥给自己解密使用。</li>  <li>传送证书    <br> 这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等。</li>  <li>客户端解析证书    <br> 这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随即值，然后用证书对该随机值进行加密。</li>  <li>传送加密信息    <br> 这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。</li>  <li>服务段解密信息    <br> 服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。</li>  <li>传输加密后的信息    <br> 这部分信息是服务段用私钥加密后的信息，可以在客户端被还原。</li>  <li>客户端解密信息    <br> 客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。PS: 整个握手过程第三方即使监听到了数据，也束手无策    <h6 id="SSL原理及运行过程">      <a href="#SSL原理及运行过程" class="headerlink" title="SSL原理及运行过程"></a>SSL原理及运行过程</h6>  </li></ol><p>SSL/TLS协议基本思路是采用公钥加密法（  <strong>最有名的是RSA加密算法，属于非对称加密</strong>）。大概流程是，客户端向服务器索要公钥，然后用公钥加密信息，服务器收到密文，用自己的私钥解密。  <br>为了防止公钥被篡改，把公钥放在数字证书中，证书可信则公钥可信。公钥加密计算量很大，为了提高效率，服务端和客户端都生成对话秘钥，用它加密信息，而对话秘钥是对称加密，速度非常快。而公钥用来机密对话秘钥。  <br>  <img src="/2019/06/30/HTTP基本原理/QQ20190630-220919@2x.png" alt="cfa1da5f7631e400140ff335e7f1d721.png"></p><ol>  <li>客户端给出协议版本号、一个客户端随机数A（Client random）以及客户端支持的加密方式</li>  <li>服务端确认双方使用的加密方式，并给出数字证书、一个服务器生成的随机数B（Server random）</li>  <li>客户端确认数字证书有效，生成一个新的随机数C（Pre-master-secret），使用证书中的公钥对C加密，发送给服务端</li>  <li>服务端使用自己的私钥解密出C</li>  <li>客户端和服务器根据约定的加密方法，使用三个随机数ABC，生成对话秘钥，之后的通信都用这个对话秘钥进行加密。    <h6 id="SSL证书">      <a href="#SSL证书" class="headerlink" title="SSL证书"></a>SSL证书</h6>  </li></ol><p>证书有很多类型，按认证级别分类：1.域名认证；2.公司认证；3.扩展认证  <br>域名认证（DV=Domain Validation）：最低级别的认证，可以确认申请人拥有这个域名  <br>  <img src="/2019/06/30/HTTP基本原理/QQ20190630-220939@2x.png" alt="bd868c6f72a1942d758bf3bd4c553a08.png">  <br>公司认证（OV=Organization Validation）：确认域名所有人是哪家公司，证书里面包含公司的信息  <br>  <img src="/2019/06/30/HTTP基本原理/QQ20190630-220953@2x.png" alt="b1736de5a50795b4cb92d748de9d93fc.png">  <br>扩展认证（EV=Extended Validation）：最高级别认证，浏览器地址栏会显示公司名称。  <br>  <img src="/2019/06/30/HTTP基本原理/QQ20190630-221005@2x.png" alt="1f27d2e8b246617bd67a216e3b010de4.png"></p><h6 id="RSA加密和DH加密">  <a href="#RSA加密和DH加密" class="headerlink" title="RSA加密和DH加密"></a>RSA加密和DH加密</h6><p>加密算法分为对称加密、非对称加密和Hash加密算法。</p><ul>  <li>    <strong>对称加密</strong>：甲方和乙方使用同一种加密规则对信息加解密（    <strong>对称加密算法加解密效率高，速度快，适合大数据量加解密。常见的堆成加密算法有DES、AES、RC5、Blowfish、IDEA</strong>）</li>  <li>    <strong>非对称加密</strong>：乙方生成两把秘钥（公钥和私钥）。公钥是公开的，任何人都可以获取，私钥是保密的，只存在于乙方手中。甲方获取公钥，然后用公钥加密信息，乙方得到密文后，用私钥解密。（    <strong>非对称加密算法复杂，加解密速度慢，但安全性高，一般与对称加密结合使用</strong>）</li>  <li>    <strong>Hash加密</strong>：Hash算法是一种单向密码体制，即只有加密过程，没有解密过程（常见的Hash加密算法有MD5、SHA-1、SHA-X系列）</li></ul><h5 id="HTTP和HTTPS区别">  <a href="#HTTP和HTTPS区别" class="headerlink" title="HTTP和HTTPS区别"></a>HTTP和HTTPS区别</h5><ol>  <li>    <strong>https的安全基础是SSL</strong>，他的传输都是经过SSL加密的，安全（HTTPS作用），https报文在被包装成    <strong>tcp报文的时候完成加密的过程</strong>，无论是https的header域也好，body域也罢都是会被加密的。</li>  <li>    <strong>http是超文本传输协议，信息是明文传输，速度更快，https则是具有安全性的ssl加密传输协议</strong>。</li>  <li>    <strong>确认网站的真实性</strong>，使用HTTPS的网站可以查看网站认证信息或者通过CA机构颁发的安全欠账来查询（HTTPS作用）</li>  <li>    <strong>端口不一样，HTTP为80，HTTPS为443</strong>  </li>  <li>    <strong>http的连接很简单，是无状态的</strong>；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</li></ol><h4 id="网页基础">  <a href="#网页基础" class="headerlink" title="网页基础"></a>网页基础</h4><h5 id="HTML">  <a href="#HTML" class="headerlink" title="HTML"></a>HTML</h5><p>超文本标记语言（HYper Text Markup Language）  <br>  <figure class="highlight plain">    <table>      <tr>        <td class="gutter">          <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>        </td>        <td class="code">          <pre><span class="line">html实例</span><br><span class="line">&lt;!DOCTYPE html&gt;用来标记文档类型</span><br><span class="line">&lt;html&gt; </span><br><span class="line">    &lt;head&gt;       # 网页头</span><br><span class="line">       &lt;meta charset=&quot;UTF-8&quot;&gt;  #指定网页编码</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;&lt;/body&gt;  # 网页体</span><br><span class="line">&lt;html/&gt;</span><br></pre>        </td>      </tr>    </table>  </figure></p><h5 id="CSS">  <a href="#CSS" class="headerlink" title="CSS"></a>CSS</h5><p>层叠样式表（cascading Style Sheets）</p><h6 id="选择器">  <a href="#选择器" class="headerlink" title="选择器"></a>选择器</h6><table>  <thead>    <tr>      <th>选择器</th>      <th>例子</th>      <th>描述</th>      <th>css</th>    </tr>  </thead>  <tbody>    <tr>      <td>.class</td>      <td>.intro</td>      <td>选择 class=”intro” 的所有元素</td>      <td></td>    </tr>    <tr>      <td>#id</td>      <td>#firstname</td>      <td>选择 id=”firstname” 的所有元素。</td>      <td></td>    </tr>    <tr>      <td>*</td>      <td>*</td>      <td>选择所有元素。</td>      <td></td>    </tr>    <tr>      <td>element</td>      <td>p</td>      <td>选择所有        <p> 元素。</p></td>      <td></td>    </tr>    <tr>      <td>element,element</td>      <td>div,p</td>      <td>选择所有        <div> 元素和所有          <p> 元素。</p></div></td>      <td></td>    </tr>    <tr>      <td>element element</td>      <td>div p</td>      <td>选择        <div> 元素内部的所有          <p> 元素。</p></div></td>      <td></td>    </tr>    <tr>      <td>element&gt;element</td>      <td>div&gt;p</td>      <td>选择父元素为        <div> 元素的所有          <p> 元素。</p></div></td>      <td></td>    </tr>    <tr>      <td>[attribute]</td>      <td>[target]</td>      <td>选择带有 target 属性所有元素。</td>      <td></td>    </tr>    <tr>      <td>[attribute=value]</td>      <td>[target=blank]</td>      <td>选择 target=”blank” 的所有元素。</td>      <td></td>    </tr>    <tr>      <td>[attribute~=value]</td>      <td>[target=blank]</td>      <td>选择 target属性包含”blank” 的所有元素。</td>      <td></td>    </tr>    <tr>      <td>.</td>      <td>.</td>      <td>.</td>    </tr>  </tbody></table><h5 id="JavaScript">  <a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h5><h5 id="Session和Cookies">  <a href="#Session和Cookies" class="headerlink" title="Session和Cookies"></a>Session和Cookies</h5><h6 id="产生">  <a href="#产生" class="headerlink" title="产生"></a>产生</h6><p>  <strong>web请求与响应基于http，而http是无状态协议</strong>。所以我们为了跨越多个请求保留用户的状态，需要利用某种工具帮助我们记录与识别每一次请求及请求的其他信息。  <br>cookie 是一种发送到客户浏览器的文本串句柄，并保存在客户机硬盘上，可以用来在某个WEB站点会话间持久的保持数据。  <br>通过cookies的值可以确定是哪个session</p><h6 id="Session">  <a href="#Session" class="headerlink" title="Session"></a>Session</h6><p>当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。</p><p>session其实指的就是访问者从到达某个特定主页到离开为止的那段时间。Session其实是利用Cookie进行信息处理的，当用户首先进行了请求后，服务端就在用户浏览器上创建了一个Cookie，当这个Session结束时，其实就是意味着这个Cookie就过期了。注：为这个用户创建的Cookie的名称是aspsessionid。这个Cookie的唯一目的就是为每一个用户提供不同的身份认证。</p><p>  <strong>对于Session来说，除非程序通知服务器删除Session，否则服务器会一直保留。</strong></p><p>由于关闭浏览器不会使Session被删除，这就需要服务器  <strong>为Session设置一个失效时间</strong>，当距离客户端上一次使用Session的时间超过这个失效时间时，服务器就认为客户端停止了活动，会把Session删除以节省存储空间。</p><h6 id="Cookies">  <a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h6><p>  <strong>服务端如何识别特定的客户</strong>？  <br>每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在  Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。</p><p>  <strong>如果客户端的浏览器禁用了 Cookie 怎么办</strong>？  <br>此时，  <strong>会话cookie和持久化cookie都不能用，得使用一种叫做URL重写的技术</strong>来进行会话跟踪，即  <strong>每次HTTP交互，URL后面都会被附加</strong>上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。</p><p>cookie是存储key-value对的一个文件，务必记住，它是由服务器将cookie添加到response里一并返回给客户端，然后客户端会自动把response里的cookie接收下来，并且保存到本地，下次发出请求的时候，就会把cookie附加在request里，服务器在根据request里的cookie遍历搜索是否有与之符合的信息  </p><p>会话Cookie：把Cookie保存到浏览器上，当存活期为负数  <br>持久Cookie：把Cookie保存到文件中，当存活期为正数  <br>cookies的失效时间由MAX Age或Expires字段决定</p><h6 id="区别">  <a href="#区别" class="headerlink" title="区别"></a>区别</h6><ol>  <li>cookie数据存放在客户的浏览器上，session数据放在服务器上，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；</li>  <li>cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗    <br> 考虑到安全应当使用session</li>  <li>cookie和session的共同之处在于：cookie和session都是用来跟踪浏览器用户身份的会话方式。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="网络协议" scheme="http://xixili.online/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>算法图解（二）</title>
    <link href="http://xixili.online/2019/06/30/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://xixili.online/2019/06/30/算法图解（二）/</id>
    <published>2019-06-30T13:54:41.000Z</published>
    <updated>2019-06-30T15:23:55.012Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="快速排序">  <a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><h5 id="分而治之">  <a href="#分而治之" class="headerlink" title="分而治之"></a>分而治之</h5><p>（divide and conquer， D&amp;C） ——一种著名的递归式问题解决方法。  <br> 使用D&amp;C解决问题的过程包括两个步骤。</p><ol>  <li>找出基线条件，这种条件必须尽可能简单。</li>  <li>不断将问题分解（或者说缩小规模），直到符合基线条件。</li></ol><p>找基线条件类似于找最大公约数，尽量找一个适合所有元素情况的条件</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre>      </td>      <td class="code">        <pre><span class="line">使用循环求和：</span><br><span class="line">def sum(arr):</span><br><span class="line">    total = 0</span><br><span class="line">    for x in arr:</span><br><span class="line">        total += x</span><br><span class="line">    return total</span><br><span class="line"></span><br><span class="line">print sum([1, 2, 3, 4])</span><br><span class="line"></span><br><span class="line">使用递归求和：</span><br><span class="line">def sum（arr）：</span><br><span class="line">    if len(arr) == 0:      #  </span><br><span class="line">        return 0</span><br><span class="line">    else:</span><br><span class="line">        return arr[0] + sum[1:]</span><br><span class="line">        </span><br><span class="line"> 一个递归函数来计算列表包含的元素数:</span><br><span class="line">def count(arr):</span><br><span class="line">    if arr  == []:    # 基线条件：数组为空</span><br><span class="line">        return 0</span><br><span class="line">    else:</span><br><span class="line">        return 1 + count(arr[1:])</span><br></pre>      </td>    </tr>  </table></figure><h5 id="快速排序-1">  <a href="#快速排序-1" class="headerlink" title="快速排序"></a>快速排序</h5><p>原理</p><ol>  <li>首先，从数组中选择一个元素，这个元素被称为基准值（pivot）。</li>  <li>接下来，找出比基准值小的元素以及比基准值大的元素。</li>  <li>对这两个子数组进行快速排序。</li>  <li>进行递归操作    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>          </td>          <td class="code">            <pre><span class="line">快速排序（采用递归）</span><br><span class="line"> def quicksort(array):</span><br><span class="line">    if len(array) &lt; 2:</span><br><span class="line">        return array</span><br><span class="line">    else:</span><br><span class="line">        pivot = array[0]</span><br><span class="line">        less = [i for i in array[1:] if i &lt;= pivot]</span><br><span class="line">        greater = [i for i in array[1:] if i &gt; pivot]</span><br><span class="line">    return quicksort(less) + [pivot] + quicksort(greater)</span><br><span class="line"></span><br><span class="line">print quicksort([10, 5, 2, 3])</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ol><p>常见的大O运行时间  <br>  <img src="/2019/06/30/算法图解（二）/QQ20190630-215529@2x.png" alt="运行时间"></p><h5 id="合并排序-（merge-sort）">  <a href="#合并排序-（merge-sort）" class="headerlink" title="合并排序 （merge sort）"></a>合并排序 （merge sort）</h5><p> 合并排序的运行时间总是O(n log n)</p><h5 id="平均情况和最糟情况">  <a href="#平均情况和最糟情况" class="headerlink" title="平均情况和最糟情况"></a>平均情况和最糟情况</h5><p>快速排序依赖于选择的基准值  <br>[1,2,3,4,5,6,7,8]  <br>基准值为1，  <br>基准值为4,</p><h4 id="散列表（hash-table）">  <a href="#散列表（hash-table）" class="headerlink" title="散列表（hash table）"></a>散列表（hash table）</h4><p>在python中就是dict  <br> 学习散列表——最有用的基本数据结构之一。散列表用途广泛，本章将介绍其常见的用途。  <br> 学习散列表的内部机制：实现、冲突和散列函数。这将帮助你理解如何分析散列表的性能。</p><h5 id="散列函数">  <a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h5><p> 散列函数是这样的函数，即无论你给它什么数据，它都还你一个数字， 散列函数必须满足一些要求</p><ol>  <li>它必须是一致的。例如，假设你输入apple时得到的是4，那么每次输入apple时，得到的都必须为4。如果不是这样，散列表将毫无用处。</li>  <li>    <strong>它应将不同的输入映射到不同的数字</strong>。 例如， 如果一个散列函数不管输入是什么都返回1，它就不是好的散列函数。最理想的情况是，将不同的输入映射到不同的数字。    <br>使用散列函数和数组创建了一种被称为散列表（hash table）的数据结构。数组和链表都被直接映射到内存，但散列表更复杂，它使用散列函数来确定元素的存储位置。    <br>需要注意的是这里注重映射， 使用散列表来检查是否重复，速度非常快</li></ol><h5 id="应用">  <a href="#应用" class="headerlink" title="应用"></a>应用</h5><h6 id="用于查找：DNS解析，介个查找">  <a href="#用于查找：DNS解析，介个查找" class="headerlink" title="用于查找：DNS解析，介个查找"></a>用于查找：DNS解析，介个查找</h6><h6 id="防止重复：投票">  <a href="#防止重复：投票" class="headerlink" title="防止重复：投票"></a>防止重复：投票</h6><h6 id="用于缓存：-缓存-记住数据，以免服务器再通过处理来生成它们，提升速度">  <a href="#用于缓存：-缓存-记住数据，以免服务器再通过处理来生成它们，提升速度" class="headerlink" title="用于缓存： 缓存/记住数据，以免服务器再通过处理来生成它们，提升速度"></a>用于缓存： 缓存/记住数据，以免服务器再通过处理来生成它们，提升速度</h6><h5 id="冲突">  <a href="#冲突" class="headerlink" title="冲突"></a>冲突</h5><p> 冲突（collision） ：给两个键分配的位置相同  <br> 如果两个键映射到了同一个位置，就在这个位置存储一个链表， 如果散列表存储的链表很长，散列表的速度将急剧下降。</p><h5 id="性能">  <a href="#性能" class="headerlink" title="性能"></a>性能</h5><p> 在使用散列表时，避开最糟情况至关重要。为此，需要避免冲突。而要避免冲突，需要有：</p><ol>  <li>较低的填装因子；</li>  <li>良好的散列函数</li></ol><h5 id="填装因子">  <a href="#填装因子" class="headerlink" title="填装因子"></a>填装因子</h5><p> 填装因子度量的是散列表中有多少位置是空的。  <br>  <img src="/2019/06/30/算法图解（二）/QQ20190630-215647@2x.png" alt="填装因子">  <br> 填装因子大于1意味着商品数量超过了数组的位置数。一旦填装因子开始增大，你就需要在散列表中添加位置，这被称为调整长度（resizing） 。</p><ol>  <li>你可以结合散列函数和数组来创建散列表。</li>  <li>冲突很糟糕，你应使用可以最大限度减少冲突的散列函数。</li>  <li>散列表的查找、插入和删除速度都非常快。</li>  <li>散列表适合用于模拟映射关系。</li>  <li>一旦填装因子超过0.7，就该调整散列表的长度。</li>  <li>散列表可用于缓存数据（例如，在Web服务器上）。</li>  <li>散列表非常适合用于防止重复。</li></ol><h4 id="广度搜索优先（找出两样之间最少的路径）">  <a href="#广度搜索优先（找出两样之间最少的路径）" class="headerlink" title="广度搜索优先（找出两样之间最少的路径）"></a>广度搜索优先（找出两样之间最少的路径）</h4><p> 一度关系胜过二度关系，二度关系胜过三度关系，以此类推。因此，你应先在一度关系中搜索，确定其中没有芒果销售商后，才在二度关系中搜索。广度优先搜索就是这样做的！</p><h5 id="最短路径问题（shorterst-path-problem）">  <a href="#最短路径问题（shorterst-path-problem）" class="headerlink" title="最短路径问题（shorterst-path problem）"></a>最短路径问题（shorterst-path problem）</h5><p> 需要两个步骤。  <br>(1) 使用图来建立问题模型。  <br>(2) 使用广度优先搜索解决问题</p><h5 id="图">  <a href="#图" class="headerlink" title="图"></a>图</h5><p> 图模拟一组连接。 由节点和边组成。一个节点可能与众多节点直接相连，这些节点被称为邻居。</p><ol>  <li>第一类问题：我要买水果，寻找卖水果的吗？</li>  <li>第二类问题：从节点A出发，前往节点B的哪条路径最短？</li></ol><h5 id="队列">  <a href="#队列" class="headerlink" title="队列"></a>队列</h5><p>按照添加顺序进行检查  <br>先进先出，后进后出  <br> 队列是一种先进先出（First In First Out， FIFO）的数据结构，而栈是一种后进先出（Last In First Out， LIFO）的数据结构。  <br>  <img src="/2019/06/30/算法图解（二）/QQ20190630-215720@2x.png" alt="堆和栈"></p><h5 id="实现图">  <a href="#实现图" class="headerlink" title="实现图"></a>实现图</h5><p> 有向图（directed graph） ，其中的关系是单向的。  <br> 无向图（undirected graph）没有箭头，直接相连的节点互为邻居</p><p>  <img src="/2019/06/30/算法图解（二）/QQ20190630-215835@2x.png" alt="顾.png">  <br>  <img src="/2019/06/30/算法图解（二）/QQ20190630-215909@2x.png" alt="顾1.png"></p><h4 id="狄克斯特拉算法（-找出最快的路径）">  <a href="#狄克斯特拉算法（-找出最快的路径）" class="headerlink" title="狄克斯特拉算法（ 找出最快的路径）"></a>狄克斯特拉算法（ 找出最快的路径）</h4><p> 狄克斯特拉算法包含4个步骤。  <br>(1) 找出最便宜的节点，即可在最短时间内前往的节点。  <br>(2) 对于该节点的邻居，检查是否有前往它们的更短路径，如果有，就更新其开销。  <br>(3) 重复这个过程，直到对图中的每个节点都这样做了。  <br>(4) 计算最终路径。</p><h5 id="术语">  <a href="#术语" class="headerlink" title="术语"></a>术语</h5><p>  <img src="/2019/06/30/算法图解（二）/QQ20190630-215926@2x.png" alt="123d9cd09873b9f7a9eeac7e23db2099.png">  <br> 狄克斯特拉算法用于每条边都有关联数字的图，这些数字称为权重（weight）。  <br> 带权重的图称为加权图（weighted graph），不带权重的图称为非加权图（unweighted graph）。  <br> 狄克斯特拉算法只适用于有向无环图（directed acyclic graph， DAG）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="算法" scheme="http://xixili.online/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法图解（一）</title>
    <link href="http://xixili.online/2019/06/30/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://xixili.online/2019/06/30/算法图解（一）/</id>
    <published>2019-06-30T13:39:31.000Z</published>
    <updated>2019-07-01T06:44:20.414Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="算法图解1-4章">  <a href="#算法图解1-4章" class="headerlink" title="算法图解1-4章"></a>算法图解1-4章</h3><h4 id="1、二分法">  <a href="#1、二分法" class="headerlink" title="1、二分法"></a>1、二分法</h4><p>  <strong>仅当列表是有序的时候，二分查找才管用</strong>  <br>对数运算是幂运算的逆运算。  <br>本书使用大O表示法（稍后介绍）讨论运行时间时，log指的都是log2 。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>      </td>      <td class="code">        <pre><span class="line">def binary_search(list, item):  </span><br><span class="line">    # low和 high用于跟踪要在其中 查找的列表部分</span><br><span class="line">    low = 0 </span><br><span class="line">    high = len(list)—1</span><br><span class="line">    # 只要范围没有缩小到 只包含一个元素， 就检查中间的元素</span><br><span class="line">    while low &lt;= high:</span><br><span class="line">        mid = (low + high) / 2</span><br><span class="line">        guess = list[mid] </span><br><span class="line">        if guess == item:  # 找到了元素</span><br><span class="line">            return mid </span><br><span class="line">        if guess &gt; item:  # 猜的数字大了</span><br><span class="line">            high = mid - 1 </span><br><span class="line">        else:           # 猜的数字小了 没有指定的元素</span><br><span class="line">            low = mid + 1 </span><br><span class="line">    return None</span><br><span class="line">my_list = [1, 3, 5, 7, 9]</span><br><span class="line">print binary_search(my_list, 3) # =&gt; 1</span><br><span class="line"># 别忘了索引从0开始，第 二个位置的索引为1</span><br><span class="line">print binary_search(my_list, -1) # =&gt; None</span><br><span class="line"># 在Python中，None表示空，它 意味着没有找到指定的元素</span><br></pre>      </td>    </tr>  </table></figure><h5 id="大O表示法">  <a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h5><p>大O表示法是一种特殊的表示法，指出了算法的速度有多快。</p><ul>  <li> 二分查找的速度比简单查找快得多。</li>  <li> O(log n)比O(n)快。需要搜索的元素越多，前者比后者就快得越多。 </li>  <li> 算法运行时间并不以秒为单位。 </li>  <li> 算法运行时间是从其增速的角度度量的。</li>  <li> 算法运行时间用大O表示法表示。</li></ul><h6 id="算法的运行时间以不同的速度增加">  <a href="#算法的运行时间以不同的速度增加" class="headerlink" title="算法的运行时间以不同的速度增加"></a>算法的运行时间以不同的速度增加</h6><p>仅知道算法 需要多长时间才能运行完毕还不够，还需知道运行时间如何随列表增长 而增加。这正是大O表示法的用武之地。</p><h6 id="算法的运行时间以不同的速度增加-1">  <a href="#算法的运行时间以不同的速度增加-1" class="headerlink" title="算法的运行时间以不同的速度增加"></a>算法的运行时间以不同的速度增加</h6><p>  <strong>大O表示法 让你能够比较操作数，它指出了算法运行时间的增速。</strong>  <br>为检查长度为n的列表，二分查找需要执行log n次操作。使用大O表示法，O(log n)。</p><h6 id="大-O-表示法指出了最糟情况下的运行时间">  <a href="#大-O-表示法指出了最糟情况下的运行时间" class="headerlink" title="大 O 表示法指出了最糟情况下的运行时间"></a>大 O 表示法指出了最糟情况下的运行时间</h6><p>简单查找的运行时间总是为O(n)。查找Adit时，一次就找到了，这是最佳的情形，但大O表 示法说的是最糟的情形。</p><h6 id="一些常见的大-O-运行时间">  <a href="#一些常见的大-O-运行时间" class="headerlink" title="一些常见的大 O 运行时间"></a>一些常见的大 O 运行时间</h6><ul>  <li>O(log n)，也叫对数时间，这样的算法包括二分查找。 </li>  <li>O(n)，也叫线性时间，这样的算法包括简单查找。 </li>  <li>O(n * log n)，这样的算法包括第4章将介绍的快速排序——一种速度较快的排序算法。 </li>  <li>O(n 2 )，这样的算法包括第2章将介绍的选择排序——一种速度较慢的排序算法。 </li>  <li>O(n!)，这样的算法包括接下来将介绍的旅行商问题的解决方案——一种非常慢的算法。</li></ul><h4 id="2、选择排序">  <a href="#2、选择排序" class="headerlink" title="2、选择排序"></a>2、选择排序</h4><ul>  <li>    <strong>计算机内存犹如一大堆抽屉</strong>  </li>  <li>    <strong>需要存储多个元素时，可使用数组或链表</strong>  </li>  <li>    <strong>数组的元素都在一起。</strong>  </li>  <li>    <strong>链表的元素是分开的，其中每个元素都存储了下一个元素的地址。</strong>  </li>  <li>    <strong>数组的读取速度很快。</strong>  </li>  <li>    <strong>链表的插入和删除速度很快。</strong>  </li>  <li>    <strong>在同一个数组中，所有元素的类型都必须相同（都为int、double等）。</strong>  </li></ul><h6 id="内存工作原理">  <a href="#内存工作原理" class="headerlink" title="内存工作原理"></a>内存工作原理</h6><p>计算机就像是很多抽屉的集合体，每个抽屉都有地址。所有的抽屉是就是整个内存  <br>需要将数据存储到内存时，你请求计算机提供存储空间，计算机给你一个存储地址。需要存储多项数据时，有两种基本方式——  <strong>数组和链表</strong>。</p><p>  <img src="/2019/06/30/算法图解（一）/QQ20190630-214720@2x.png" alt="内存地址"></p><h5 id="数组和链表">  <a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h5><p>  <strong>数组在内存中相连的，地址相连</strong>，当需要插入数组时，是需要请求计算机重新分配一块内存出来的，</p><h6 id="链表">  <a href="#链表" class="headerlink" title="链表"></a>链表</h6><p>  <strong>链表中的元素可存储在内存的任何地方。</strong>  <br>链表的每个元素都存储了下一个元素的地址，从而使一系列随机的内存地址串在一起。问题：需要读取链表的最后一个元素时，你不能直接读取，因为你不知道 它所处的地址，必须先访问元素#1，从中获取元素#2的地址，再访问元素#2并从中获取元素#3  的地址，以此类推，直到访问最后一个元素。  <br>  <strong>读取速度慢，插入快</strong></p><h6 id="数组">  <a href="#数组" class="headerlink" title="数组"></a>数组</h6><p>  <strong>读取速度快，插入慢</strong>  <br>1、读取所有元素时，链表效率很高  <br>2、读取某一确切元素时（随机地读取元素时），效率低  <br>3、插入操作跟读取操作比较，来选取是链表还是列表</p><h6 id="术语">  <a href="#术语" class="headerlink" title="术语"></a>术语</h6><p>索引：元素的位置  <br>  <img src="/2019/06/30/算法图解（一）/QQ20190630-215014@2x.png" alt="元素的位置">  <br>因此，不说“元素20的位置为1”，而说“元素20位于索引1处”。本书 将使用索引来表示位置。  <br>有两 种访问方式：随机访问和顺序访问。</p><h6 id="选择排序">  <a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h6><p>依次查找最大或者最小的数据，次数依次为n-1,n-2….2,1  <br>总共需要次数为  <br>  <figure class="highlight plain">    <table>      <tr>        <td class="gutter">          <pre><span class="line">1</span><br></pre>        </td>        <td class="code">          <pre><span class="line">(n-1 + 1) /2  * n = n^&#123;2&#125;/2</span><br></pre>        </td>      </tr>    </table>  </figure></p><p>但大O表示法省略诸如1/2这样的常数（有关这方面的完整讨论，请参阅第4章），因此简单地写作O(n × n)或O(n^2)。  <br>  <figure class="highlight plain">    <table>      <tr>        <td class="gutter">          <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>        </td>        <td class="code">          <pre><span class="line">def findSmallest(arr):</span><br><span class="line">    smallest = arr[0] </span><br><span class="line">    smallest_index = 0 # 存储最小的值 存储最小元素的索引</span><br><span class="line">    for i in range(1, len(arr)):</span><br><span class="line">        if arr[i] &lt; smallest:</span><br><span class="line">            smallest = arr[i]</span><br><span class="line">            smallest_index = i </span><br><span class="line">    return smallest_index</span><br><span class="line"></span><br><span class="line">def selectionSort(arr):  # 对数组进行排序</span><br><span class="line">    newArr = [] </span><br><span class="line">    for i in range(len(arr)):</span><br><span class="line">        smallest = findSmallest(arr)</span><br><span class="line">        newArr.append(arr.pop(smallest)) </span><br><span class="line">    return newArr</span><br><span class="line"></span><br><span class="line">print selectionSort([5, 3, 6, 2, 10])</span><br></pre>        </td>      </tr>    </table>  </figure></p><h4 id="3、递归">  <a href="#3、递归" class="headerlink" title="3、递归"></a>3、递归</h4><p>调用自己的就是递归  <br>“如果使用循环，程序的性能可能更高；如果使用递归，程序可能 更容易理解</p><h6 id="基线条件和递归条件">  <a href="#基线条件和递归条件" class="headerlink" title="基线条件和递归条件"></a>基线条件和递归条件</h6><p>编写递归函数时，必须告诉它何时停止递归。</p><ol>  <li>    <strong>基线条件</strong>：函数不再调用自己，从而避免形成无限循环。</li>  <li>    <strong>递归条件</strong>：函数调用自己</li></ol><h6 id="栈（先进后出，后进先出）">  <a href="#栈（先进后出，后进先出）" class="headerlink" title="栈（先进后出，后进先出）"></a>栈（先进后出，后进先出）</h6><p>递归就是一种栈  <br>栈有两种操作：</p><ol>  <li>    <strong>压入</strong>：（插入）</li>  <li>    <strong>弹出</strong>弹出（删除并读取）</li></ol><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>      </td>      <td class="code">        <pre><span class="line">def greet(name):</span><br><span class="line">    print &quot;hello, &quot; + name + &quot;!&quot; </span><br><span class="line">    greet2(name) </span><br><span class="line">    print &quot;getting ready to say bye...&quot; </span><br><span class="line">    bye()</span><br><span class="line"></span><br><span class="line">这个函数问候用户，再调用另外两个函数。这两个函数的代码如下。</span><br><span class="line"></span><br><span class="line">def greet2(name):</span><br><span class="line">    print &quot;how are you, &quot; + name + &quot;?&quot; </span><br><span class="line">def bye():</span><br><span class="line">    print &quot;ok bye!&quot;</span><br></pre>      </td>    </tr>  </table></figure><p>  <img src="/2019/06/30/算法图解（一）/QQ20190630-215105@2x.png" alt="函数调用">  <br>  <img src="/2019/06/30/算法图解（一）/QQ20190630-215148@2x.png" alt="函数调用2"></p><ol>  <li>假设你调用greet(“maggie”)，计算机将首先为该函数调用分配一块内存。</li>  <li>变量name被设置为maggie，这需要存储到内存中。</li>  <li>你调用函数时，计算机都像这样将函数调用涉及的所有变量的值存储到内存中。接下来， 你打印hello, maggie!，再调用greet2(“maggie”)。同样，计算机也为这个函数调用分配一    块内存。</li>  <li>计算机使用一个栈来表示这些内存块，其中第二个内存块位于第一个内存块上面。你打印 how are you, maggie?，然后从函数调用返回。此时，栈顶的内存块被弹出。</li>  <li>现在，栈顶的内存块是函数greet的，这意味着你返回到了函数greet。当你调用函数greet2 时，函数greet只执行了一部分。（：调用另一个函数时，当前函数暂停    并处于未完成状态。）此时这块内存中宏的name也为maggie,但是id不同</li>  <li>执行完函数greet2后，你回到函数 greet，并从离开的地方开始接着往下执行：首先打印getting ready to say bye…，再调用 函数bye。</li>  <li>在栈顶添加了函数bye的内存块。然后，你打印ok bye!，并从这个函数返回。</li>  <li>现在你又回到了函数greet。由于没有别的事情要做，你就从函数greet返回。这个栈用于 存储多个函数的变量，被称为调用栈。    <br>譬如这个函数    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>          </td>          <td class="code">            <pre><span class="line">def fact(x):</span><br><span class="line">    if x == 1:</span><br><span class="line">        return 1 else:</span><br><span class="line">    return x * fact(x-1)</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ol><p>  <img src="/2019/06/30/算法图解（一）/QQ20190630-215243@2x.png" alt="过程">  <br>每个fact调用都有自己的x变量。在一个函数调用中不能访问另一个的x变量。</p><p>使用栈虽然很方便，但是也要付出代价：存储详尽的信息可能占用大量的内存。每个函数调 用都要占用一定的内存，如果栈很高，就意味着计算机存储了大量函数调用的信息。在这种情况  下，你有两种选择：</p><ul>  <li>重新编写代码，转而使用循环。 </li>  <li>使用尾递归。这是一个高级递归主题，不在本书的讨论范围内。另外，并非所有的语言 都支持尾递归。</li></ul><h4 id="4、快速排序">  <a href="#4、快速排序" class="headerlink" title="4、快速排序"></a>4、快速排序</h4><p>分而治之 （divide and conquer，D&amp;C）——一种著名的递归（recursion）式问题解决方法。</p><p>使用D&amp;C解决问题的过程包括两个步骤。  <br>(1) 找出基线条件，这种条件必须尽可能简单。  <br>(2) 不断将问题分解（或者说缩小规模），直到符合基线条件。</p><h6 id="欧几里得算法">  <a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="算法" scheme="http://xixili.online/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>odoo8+ubuntu14.04部署</title>
    <link href="http://xixili.online/2017/08/16/odoo8-ubuntu14-04%E9%83%A8%E7%BD%B2/"/>
    <id>http://xixili.online/2017/08/16/odoo8-ubuntu14-04部署/</id>
    <published>2017-08-16T05:22:11.000Z</published>
    <updated>2019-06-30T13:54:13.717Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>[toc]</p><h2 id="ubuntu环境">  <a href="#ubuntu环境" class="headerlink" title="ubuntu环境"></a>ubuntu环境</h2><p>###- 安装git</p><p>###- 代码托管网站ssh秘钥添加</p><p>###- 相关python包安装</p><h4 id="step1-更新软件列表">  <a href="#step1-更新软件列表" class="headerlink" title="- step1:更新软件列表"></a>- step1:更新软件列表</h4><pre><code>sudo apt-get update</code></pre><h4 id="step2-更新软件">  <a href="#step2-更新软件" class="headerlink" title="- step2:更新软件"></a>- step2:更新软件</h4><pre><code>sudo apt-get upgrade</code></pre><h4 id="step3-安装一些odoo8要用的python依赖库">  <a href="#step3-安装一些odoo8要用的python依赖库" class="headerlink" title="- step3:安装一些odoo8要用的python依赖库"></a>- step3:安装一些odoo8要用的python依赖库</h4><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>      </td>      <td class="code">        <pre><span class="line">sudo apt-get install python-dateutil python-docutils python-feedparser </span><br><span class="line">python-jinja2 python-ldap python-libxslt1 python-lxml python-mako </span><br><span class="line">python-mock python-openid python-psycopg2 python-psutil python-pybabel </span><br><span class="line">python-pychart python-pydot python-pyparsing python-reportlab python-simplejson </span><br><span class="line">python-tz python-unittest2 python-vatnumber python-vobject python-webdav </span><br><span class="line">python-werkzeug python-xlwt python-yaml python-zsi poppler-utils python-pip </span><br><span class="line">python-pyPdf python-passlib python-decorator</span><br></pre>      </td>    </tr>  </table></figure><h4 id="step4-安装一些odoo8要用的包">  <a href="#step4-安装一些odoo8要用的包" class="headerlink" title="- step4:安装一些odoo8要用的包"></a>- step4:安装一些odoo8要用的包</h4><p>mac安装psycopg2出错时：需要先安装postgresql再安装  <br>一般情况下，缺几种库：pbkdf2, spyne,xlrd,xlsxwriter  <br>运行后，如果，提示 no model named pbkdf2等，则安装相应的库即可，  <br>  <img src="/2017/08/16/odoo8-ubuntu14-04部署/pbkdf2.png" alt="pbkdf2等库问题">  <br>有三种安装方式  <br>  <br>1、easy_install pbkdf2  <br>  <br>2、ape-get install pbkdf2  <br>  <br>3、pip install pbkdf2  <br>  <br>  <figure class="highlight plain">    <table>      <tr>        <td class="gutter">          <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>        </td>        <td class="code">          <pre><span class="line">sudo apt-get install gcc python-dev mc bzr python-setuptools python-babel </span><br><span class="line">python-feedparser python-reportlab-accel python-zsi python-openssl </span><br><span class="line">python-egenix-mxdatetime python-jinja2 python-unittest2 python-mock </span><br><span class="line">python-docutils lptools make python-psutil python-paramiko poppler-utils </span><br><span class="line">python-pdftools antiword</span><br></pre>        </td>      </tr>    </table>  </figure></p><h4 id="step5-安装postgresql和git">  <a href="#step5-安装postgresql和git" class="headerlink" title="- step5:安装postgresql和git"></a>- step5:安装postgresql和git</h4><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">sudo apt-get install python-software-properties</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install postgresql-9.3</span><br></pre>      </td>    </tr>  </table></figure><h4 id="step6-创建odoo用户以及数据库用户">  <a href="#step6-创建odoo用户以及数据库用户" class="headerlink" title="- step6:创建odoo用户以及数据库用户"></a>- step6:创建odoo用户以及数据库用户</h4><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">sudo su postgres</span><br><span class="line">postgres@openerp-desktop:/$ createuser -s openerp</span><br><span class="line">postgres@openerp-desktop:/$ createuser -s system_name</span><br><span class="line">postgres@openerp-desktop:/$ exit</span><br></pre>      </td>    </tr>  </table></figure><p>用psql -l命令查看数据库列表  <br>用psql template1,命令进入数据库  <br>step7:创建odoo用户和组 假如已经创建了openerp用户,则跳过此步骤  <br> sudo adduser –system –home=/opt/openerp –group openerp</p><p>如果安装提示  <br>  <figure class="highlight plain">    <table>      <tr>        <td class="gutter">          <pre><span class="line">1</span><br></pre>        </td>        <td class="code">          <pre><span class="line">error: [Errno 13] Permission denied: &apos;/usr/local/bin/sort_wsdl&apos;</span><br></pre>        </td>      </tr>    </table>  </figure></p><p>则给相应文件夹赋权限即可，命令：  <br>  <figure class="highlight plain">    <table>      <tr>        <td class="gutter">          <pre><span class="line">1</span><br></pre>        </td>        <td class="code">          <pre><span class="line">sudo chmod 777 -R /usr/local/bin/sort_wsdl</span><br></pre>        </td>      </tr>    </table>  </figure></p><p>  <img src="/2017/08/16/odoo8-ubuntu14-04部署/create-datebase.png" alt="创建数据库"></p><p>服务启动后，创建数据库，出现错误：permission denied to create database时，应该是openerp用户的权限受限引起的，  <br>进入数据库template1使用\du查看用户及其属性，可以发现openerp一行对应的Attributes为空  <br>  <figure class="highlight plain">    <table>      <tr>        <td class="gutter">          <pre><span class="line">1</span><br></pre>        </td>        <td class="code">          <pre><span class="line">postgres@whf:/$ psql template1</span><br></pre>        </td>      </tr>    </table>  </figure></p><p>  <img src="/2017/08/16/odoo8-ubuntu14-04部署/openerp_chmod.png" alt="查看openerp用户权限"></p><p>输入以下命令，以及创建数据库openerp用户时输入两次相同的自定义密码  <br>  <figure class="highlight plain">    <table>      <tr>        <td class="gutter">          <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>        </td>        <td class="code">          <pre><span class="line">postgres@whf:/$ dropuser openerp</span><br><span class="line">postgres@whf:/$ createuser --createdb --username postgres --createrole --pwprompt openerp</span><br><span class="line">Enter password for new role:</span><br><span class="line">Enter it again:</span><br></pre>        </td>      </tr>    </table>  </figure></p><p>之后再次进入数据库template1,查看用户以及属性</p><p>  <img src="/2017/08/16/odoo8-ubuntu14-04部署/openerp_chmod.png" alt="再次查看"></p><p>###问题</p><ul>  <li>其他情况：    <br>No PostgreSQL clusters exist; see “man pg_createcluster”    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>          </td>          <td class="code">            <pre><span class="line">sudo ln -s /tmp/.s.PGSQL.5432 /var/run/postgresql/.s.PGSQL.5432</span><br><span class="line">sudo service postgresql stop --force</span><br><span class="line">sudo service postgresql start —force</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><p>出现语言，字体提示时，直接安装字体  <br>sudo locale-gen enUS.UTF-8或 export LC_ALL=en_US.UTF-8</p><ul>  <li>    <p>安装中文字体, wkhtmltopdf, sass安装</p>    <ul>      <li>        <p>1.进入/usr/share/fonts/新建文件夹，用于存放字体          <br> ➜ /cd /usr/share/fonts          <br> ➜ fonts sudo mkdir -p gb2312Fonts          <br> [sudo] password for openerp:          <br> ➜ fonts ls          <br> cmap gb2312Fonts truetype type1 X11</p>      </li>      <li>        <p>2然后将字体文件拷贝到此文件夹下          <br> ➜ fonts cd gb2312Fonts          <br> ➜ gb2312Fonts sudo cp /home/openerp/楷体_GB2312.ttf .          <br> ➜ gb2312Fonts ls          <br> 楷体_GB2312.ttf</p>      </li>      <li>        <p>3.修改权限          <br> ➜ gb2312Fonts sudo chmod 777 楷体_GB2312.ttf</p>      </li>      <li>        <p>4开始安装：          <br> cd /usr/share/fonts/gb2312Fonts/          <br> sudo mkfontscale （创建GB2312字体的fonts.scale文件，它用来控制字体旋转缩放）          <br> sudo mkfontdir （创建GB2312字体的fonts.dir文件，它用来控制字体粗斜体产生）          <br> sudo fc-cache -fv （建立字体缓存信息，也就是让系统认识认识GB2312）</p>      </li>    </ul>  </li>  <li>    <p>wkhtmltopdf      <br>当出现Cannot connect to X server时，使用下面安装：      <br>链接：      <a href="http://stackoverflow.com/questions/9604625/wkhtmltopdf-cannot-connect-to-x-server" target="_blank" rel="noopener">http://stackoverflow.com/questions/9604625/wkhtmltopdf-cannot-connect-to-x-server</a>    </p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>          </td>          <td class="code">            <pre><span class="line">sudo apt-get install xfonts-75dpi</span><br><span class="line">wget http://download.gna.org/wkhtmltopdf/0.12/0.12.2/wkhtmltox-0.12.2_linux-trusty-amd64.deb</span><br><span class="line">sudo dpkg -i wkhtmltox-0.12.2_linux-trusty-amd64.deb</span><br><span class="line">wkhtmltopdf http://www.google.com test.pdf</span><br></pre>          </td>        </tr>      </table>    </figure>    <p>mac系统下载显示比例不对时      <br>      <a href="https://github.com/wkhtmltopdf/wkhtmltopdf/releases/0.12.3/下载" target="_blank" rel="noopener">https://github.com/wkhtmltopdf/wkhtmltopdf/releases/0.12.3/下载</a>      <br>安装好之后，需要将两个文件复制到odoo运行环境的bin目录中，pdf打印的显示比例不对，可以按照下面的方式解决</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br></pre>          </td>          <td class="code">            <pre><span class="line">scp /usr/local/bin/wkhtmltopdf    /Users/whf/.virtualenvs/odoo/bin</span><br><span class="line">scp /usr/local/bin/wkhtmltoimage  /Users/whf/.virtualenvs/odoo/bin</span><br></pre>          </td>        </tr>      </table>    </figure>  </li>  <li>    <p>sass安装      <br>淘宝RubyGems镜像安装 sass      <br>由于国内网络原因（你懂的），导致 rubygems.org 存放在 Amazon S3 上面的资源文件间歇性连接失败。这时候我们可以通过gem sources命令来配置源，先移除默认的      <a href="https://rubygems.org源，然后添加淘宝的源https://ruby.taobao.org/，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入sass安装命令gem" target="_blank" rel="noopener">https://rubygems.org源，然后添加淘宝的源https://ruby.taobao.org/，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入sass安装命令gem</a>        install sass了，关于常用gem source命令可参看：常用的gem source</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>          </td>          <td class="code">            <pre><span class="line">$ gem sources --remove https://rubygems.org/</span><br><span class="line">$ gem sources -a https://ruby.taobao.org/</span><br><span class="line">$ gem sources -l</span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line">https://ruby.taobao.org</span><br><span class="line"># 请确保只有 ruby.taobao.org</span><br><span class="line">$ gem install sass</span><br><span class="line"></span><br><span class="line">git clone git://github.com/nex3/sass.git</span><br><span class="line">cd sass</span><br><span class="line">rake install</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
</feed>
